import chalk from 'chalk';
import { logger } from '@lwrjs/diagnostics';
import { launch } from '@lwrjs/shared-utils';
import path from 'path';
import fs from 'fs-extra';
export async function expDev(options) {
    const { port, open, logLevel, timeout } = options;
    process.env.LWR_LOG_LEVEL = logLevel; // Set the log level
    if (timeout) {
        process.env.SSR_TIMEOUT = `${timeout}`;
    }
    process.env.MRT_HMR = 'true';
    // runtimePort can be undefined on invocation. The actual value is resolved via createServer()
    let runtimePort = port;
    // Validate we have an ssr.js file in the app directory
    const ssrjs = path.join(process.cwd(), options.mrtBundleRoot, 'ssr.js');
    if (!fs.existsSync(ssrjs)) {
        logger.error('Could not find a valid ssr.js file. Please ensure you have an MRT bundle extracted locally in a directory named "app"');
        process.exit(1);
    }
    let server;
    try {
        const { createDevServer } = await import('../localdev/dev-server.js');
        server = await createDevServer(runtimePort);
        await server.listen(async ({ serverMode, port: appPort }) => {
            runtimePort = appPort;
        });
        // TODO
        // eslint-disable-next-line no-console
        console.log(chalk.green(`Application is available at: http://localhost:${runtimePort}`));
        if (open) {
            await launch(runtimePort);
        }
    }
    catch (error) {
        logger.error(error);
        process.exit(1);
    }
}
//# sourceMappingURL=exp-dev.js.map