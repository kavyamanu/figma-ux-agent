var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/api/src/cli/exp-dev.ts
__markAsModule(exports);
__export(exports, {
  expDev: () => expDev
});
var import_chalk = __toModule(require("chalk"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_path = __toModule(require("path"));
var import_fs_extra = __toModule(require("fs-extra"));
async function expDev(options) {
  const {port, open, logLevel, timeout} = options;
  process.env.LWR_LOG_LEVEL = logLevel;
  if (timeout) {
    process.env.SSR_TIMEOUT = `${timeout}`;
  }
  process.env.MRT_HMR = "true";
  let runtimePort = port;
  const ssrjs = import_path.default.join(process.cwd(), options.mrtBundleRoot, "ssr.js");
  if (!import_fs_extra.default.existsSync(ssrjs)) {
    import_diagnostics.logger.error('Could not find a valid ssr.js file. Please ensure you have an MRT bundle extracted locally in a directory named "app"');
    process.exit(1);
  }
  let server;
  try {
    const {createDevServer} = await Promise.resolve().then(() => __toModule(require("../localdev/dev-server.cjs")));
    server = await createDevServer(runtimePort);
    await server.listen(async ({serverMode, port: appPort}) => {
      runtimePort = appPort;
    });
    console.log(import_chalk.default.green(`Application is available at: http://localhost:${runtimePort}`));
    if (open) {
      await (0, import_shared_utils.launch)(runtimePort);
    }
  } catch (error) {
    import_diagnostics.logger.error(error);
    process.exit(1);
  }
}
