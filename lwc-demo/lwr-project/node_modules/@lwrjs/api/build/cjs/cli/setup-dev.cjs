var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/api/src/cli/setup-dev.ts
__markAsModule(exports);
__export(exports, {
  setupDev: () => setupDev
});
var import_fs_extra = __toModule(require("fs-extra"));
var import_path = __toModule(require("path"));
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var tar = __toModule(require("tar"));
var import_child_process = __toModule(require("child_process"));
async function npmInstall(directoryPath) {
  const fullPath = import_path.default.resolve(directoryPath);
  import_diagnostics.logger.info(`Running 'npm install' in directory: ${fullPath}`);
  return new Promise((resolve, reject) => {
    const npmProcess = (0, import_child_process.spawn)("npm", ["install"], {cwd: fullPath, shell: true});
    npmProcess.stdout.on("data", (data) => {
      import_diagnostics.logger.info(`stdout: ${data}`);
    });
    npmProcess.stderr.on("data", (data) => {
      import_diagnostics.logger.error(`stderr: ${data}`);
    });
    npmProcess.on("close", (code) => {
      if (code === 0) {
        import_diagnostics.logger.info(`'npm install' completed successfully in directory: ${fullPath}`);
        resolve();
      } else {
        const error = new Error(`'npm install' failed with code ${code}`);
        import_diagnostics.logger.error(error.message);
        reject(error);
      }
    });
    npmProcess.on("error", (error) => {
      import_diagnostics.logger.error(`Error running 'npm install': ${error.message}`);
      reject(error);
    });
  });
}
async function setupDev(options) {
  if (!options.mrtBundle && !import_fs_extra.default.existsSync(import_path.default.join(options.mrtDir, "ssr.js"))) {
    throw new Error(`MRT bundle '${options.mrtBundle}' does not exist`);
  }
  if (options.mrtBundle && !import_fs_extra.default.existsSync(import_path.default.join(options.mrtDir, "ssr.js"))) {
    import_diagnostics.logger.info(`Extracting -> '${options.mrtBundle}'`);
    import_fs_extra.default.rmSync(options.mrtDir, {recursive: true, force: true});
    import_fs_extra.default.rmSync("bld", {recursive: true, force: true});
    await tar.x({
      file: options.mrtBundle
    });
    import_fs_extra.default.renameSync("bld", options.mrtDir);
  }
  if (!import_fs_extra.default.existsSync(import_path.default.join(options.mrtDir, "ssr.js"))) {
    throw new Error(`MRT bundle '${options.mrtBundle}' does not exist`);
  }
  const proxyPath = import_path.default.join(options.mrtDir, "config", "_proxy");
  if (!import_fs_extra.default.existsSync(proxyPath) && options.proxyUrl) {
    import_fs_extra.default.writeFileSync(proxyPath, `/services ${options.proxyUrl}
/sfsites ${options.proxyUrl}
/webruntime ${options.proxyUrl}
/mobify/proxy/core ${options.proxyUrl}`);
  }
  const ssrjsPath = import_path.default.join(options.mrtDir, "ssr.js");
  const versions = getVersions(ssrjsPath);
  if (versions.LWC_VERSION) {
    import_diagnostics.logger.info(`setting up lwc'`);
    const packageJsonPath = import_path.default.join(options.mrtDir, "package.json");
    const packageJsonContent = import_fs_extra.default.readJSONSync(packageJsonPath);
    packageJsonContent.dependencies = packageJsonContent.dependencies || {};
    packageJsonContent.dependencies["lwc"] = versions.LWC_VERSION;
    import_fs_extra.default.writeJsonSync(packageJsonPath, packageJsonContent, {spaces: 4});
    if (options.npmInstall) {
      try {
        await npmInstall(options.mrtDir);
        import_diagnostics.logger.info("npm install completed successfully");
      } catch (error) {
        import_diagnostics.logger.error("Failed to run npm install:", error);
      }
    }
  }
}
function getVersions(filePath) {
  const lwrVersionRegex = /globalThis\.LWR_VERSION='([^']+)';/g;
  const lwcVersionRegex = /globalThis\.LWC_VERSION='([^']+)';/g;
  const content = import_fs_extra.default.readFileSync(filePath, "utf-8");
  const versions = {
    LWR_VERSION: "",
    LWC_VERSION: ""
  };
  const result = lwrVersionRegex.exec(content);
  versions.LWR_VERSION = result ? result[0] : "";
  const lwcResult = lwcVersionRegex.exec(content);
  versions.LWC_VERSION = lwcResult ? lwcResult[0] : "";
  if (!versions.LWR_VERSION || !versions.LWC_VERSION) {
    throw new Error("Could not find all version strings in the file");
  }
  import_diagnostics.logger.info("versions", versions);
  return versions;
}
