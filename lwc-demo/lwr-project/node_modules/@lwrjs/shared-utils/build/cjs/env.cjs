var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/shared-utils/src/env.ts
__markAsModule(exports);
__export(exports, {
  REQUEST_DEPTH_HEADER: () => REQUEST_DEPTH_HEADER,
  REQUEST_DEPTH_KEY: () => REQUEST_DEPTH_KEY,
  buildEnvironmentContext: () => buildEnvironmentContext,
  getFeatureFlags: () => getFeatureFlags,
  isLambdaEnv: () => isLambdaEnv,
  isLocalDev: () => isLocalDev,
  parseRequestDepthHeader: () => parseRequestDepthHeader
});
if (getFeatureFlags().REEVALUATE_MODULES && !getFeatureFlags().LEGACY_LOADER) {
  throw new Error("REEVALUATE_MODULES is only supported with LEGACY_LOADER");
}
function getFeatureFlags() {
  return {
    ASSETS_ON_LAMBDA: process.env.ASSETS_ON_LAMBDA !== void 0 && process.env.ASSETS_ON_LAMBDA.toLowerCase() === "true" ? true : false,
    LEGACY_LOADER: process.env.LEGACY_LOADER !== void 0 && process.env.LEGACY_LOADER.toLowerCase() === "true" ? true : false,
    SSR_STATIC_BUNDLES: process.env.SSR_STATIC_BUNDLES !== void 0 && process.env.SSR_STATIC_BUNDLES.toLowerCase() === "true" ? true : false,
    SSR_WITH_CSR_FALLBACK: process.env.SSR_WITH_CSR_FALLBACK !== void 0 && process.env.SSR_WITH_CSR_FALLBACK.toLowerCase() === "true" ? true : false,
    EXPERIMENTAL_UNVERSIONED_ALIASES: process.env.EXPERIMENTAL_UNVERSIONED_ALIASES !== void 0 && process.env.EXPERIMENTAL_UNVERSIONED_ALIASES.toLowerCase() === "true" ? true : false,
    LWR_TRACING: process.env.LWR_TRACING !== void 0 && process.env.LWR_TRACING.toLowerCase() !== "off" ? process.env.LWR_TRACING : false,
    ENABLE_NONCE: process.env.ENABLE_NONCE !== void 0 && process.env.ENABLE_NONCE.toLowerCase() === "true" ? true : false,
    SINGLE_RENDER_MODE: process.env.SINGLE_RENDER_MODE !== void 0 && process.env.SINGLE_RENDER_MODE.toLowerCase() === "true" ? true : false,
    REEVALUATE_MODULES: process.env.REEVALUATE_MODULES !== void 0 && process.env.REEVALUATE_MODULES.toLowerCase() === "true" ? true : false,
    MAX_VIEW_CACHE_TTL: process.env.MAX_VIEW_CACHE_TTL
  };
}
function isLambdaEnv() {
  return process.env.AWS_LAMBDA_FUNCTION_NAME !== void 0;
}
function isLocalDev() {
  return process.env.MRT_HMR === "true";
}
function buildEnvironmentContext(runtimeParams) {
  const basePath = runtimeParams.basePath;
  const locale = runtimeParams.locale;
  const assetBasePath = runtimeParams.assetBasePath;
  const uiBasePath = runtimeParams.uiBasePath;
  return {
    basePath,
    locale,
    assetBasePath,
    uiBasePath
  };
}
var REQUEST_DEPTH_HEADER = "X-SFDC-Request-Depth";
var REQUEST_DEPTH_KEY = REQUEST_DEPTH_HEADER.toLowerCase();
function parseRequestDepthHeader(headers = {}) {
  let maxDepth = 0;
  const value = headers && headers[REQUEST_DEPTH_KEY];
  if (value) {
    if (Array.isArray(value)) {
      for (const depth of value) {
        if (typeof depth === "string") {
          const depthValue = parseInt(depth, 10);
          if (!isNaN(depthValue) && depthValue > maxDepth) {
            maxDepth = depthValue;
          }
        }
      }
    } else if (typeof value === "string") {
      const depth = parseInt(value, 10);
      if (!isNaN(depth) && depth > maxDepth) {
        maxDepth = depth;
      }
    }
  }
  return maxDepth;
}
