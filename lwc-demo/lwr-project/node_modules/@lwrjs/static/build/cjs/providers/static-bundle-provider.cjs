var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/@lwrjs/static/src/providers/static-bundle-provider.ts
__markAsModule(exports);
__export(exports, {
  default: () => static_bundle_provider_default
});
var import_diagnostics = __toModule(require("@lwrjs/diagnostics"));
var import_shared_utils = __toModule(require("@lwrjs/shared-utils"));
var import_path = __toModule(require("path"));
var import_fs_extra = __toModule(require("fs-extra"));
var import_site_metadata = __toModule(require("../site-metadata.cjs"));
var StaticBundleProvider = class {
  constructor(_config, context) {
    this.name = "static-bundle-provider";
    if (!context.siteMetadata) {
      throw new Error(`[${this.name}] Site metadata was not found`);
    }
    this.siteMetadata = context.siteMetadata;
    this.siteRootDir = context.siteMetadata.getSiteRootDir();
    this.bundleConfig = context.config.bundleConfig;
    this.i18n = context.config.i18n;
  }
  async bundle(moduleId, runtimeEnvironment, runtimeParams) {
    const {specifier, name, namespace, version} = moduleId;
    const {
      debug,
      i18n: {defaultLocale}
    } = runtimeEnvironment;
    const localeId = runtimeParams?.locale || defaultLocale;
    const metadata = this.getBundleMetadata(moduleId, localeId, debug);
    if (!metadata) {
      return void 0;
    }
    const bundlePath = import_path.default.join(this.siteRootDir, metadata.path);
    const code = await this.getCode(bundlePath, debug, specifier, version, localeId);
    const imports = metadata.imports.map((importSpecifier) => this.getModuleReference(importSpecifier, localeId, debug));
    const dynamicImports = metadata.dynamicImports?.map((importSpecifier) => this.getModuleReference(importSpecifier, localeId, debug));
    const id = (0, import_shared_utils.getSpecifier)(moduleId);
    const exploded = (0, import_shared_utils.explodeSpecifier)(id);
    const resolvedName = name ?? exploded.name;
    const resolvedNamespace = namespace ?? exploded.namespace;
    const resolvedVersion = (0, import_site_metadata.resolveStaticBundleVersion)(metadata.version, version);
    const includedModules = metadata.includedModules?.map((includedId) => {
      const includedModule = this.getModuleReference(includedId, localeId, debug);
      return (0, import_shared_utils.getSpecifier)(includedModule);
    }) || [];
    return {
      code,
      id: (0, import_shared_utils.getSpecifier)({
        specifier,
        version: resolvedVersion,
        name: resolvedName,
        namespace: resolvedNamespace
      }),
      name: resolvedName,
      namespace: resolvedNamespace,
      version: resolvedVersion,
      specifier,
      config: this.bundleConfig,
      integrity: metadata.integrity,
      bundleRecord: {
        includedModules,
        imports,
        dynamicImports
      },
      src: bundlePath
    };
  }
  getBundleMetadata(moduleId, localeId, debug) {
    const siteBundleId = (0, import_site_metadata.getSiteBundleId)(moduleId, localeId, this.i18n);
    return this.siteMetadata.getSiteBundlesDecisionTree().find(siteBundleId, debug);
  }
  getModuleReference(siteBundleIdStr, localeId, debug) {
    const siteBundleId = (0, import_site_metadata.parseSiteId)(siteBundleIdStr);
    const includedModule = (0, import_shared_utils.explodeSpecifier)(siteBundleId.specifier);
    if (!siteBundleId.variants[import_shared_utils.VERSION_SIGIL]) {
      const importBundleMetadata = this.siteMetadata.getSiteBundlesDecisionTree().find(siteBundleIdStr, debug, localeId);
      includedModule.version = (0, import_site_metadata.resolveStaticBundleVersion)(importBundleMetadata?.version);
    } else {
      includedModule.version = siteBundleId.variants[import_shared_utils.VERSION_SIGIL];
    }
    return includedModule;
  }
  async getCode(bundlePath, debug, specifier, version, localeId) {
    const isLambda = (0, import_shared_utils.isLambdaEnv)();
    let bundleSourcePath = bundlePath;
    try {
      if (debug && isLambda) {
        const metadata = this.getBundleMetadata({specifier, version}, localeId, false);
        if (!metadata) {
          import_diagnostics.logger.warn({
            label: "static-bundle-provider",
            message: `Unexpected code reference: ${specifier}`
          });
          return `throw new Error('Unexpected code reference: ${specifier}');`;
        }
        bundleSourcePath = import_path.default.join(this.siteRootDir, metadata.path);
      }
      return await import_fs_extra.default.readFile(bundleSourcePath, "utf-8");
    } catch (err) {
      import_diagnostics.logger.warn({
        label: "static-bundle-provider",
        message: `Unexpected code reference: ${specifier} ${bundleSourcePath}`
      }, err);
      return `throw new Error('Unexpected code reference: ${specifier} ${bundleSourcePath}');`;
    }
  }
};
var static_bundle_provider_default = StaticBundleProvider;
