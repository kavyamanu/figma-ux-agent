import { Option, InvalidArgumentError } from 'commander';
export function getTargetOption() {
    return new Option('-t, --target <target>', '[string] configured target for deployment')
        .choices(['default', 'mrt', 'netlify'])
        .default('default');
}
export function getSsrTimeoutOption() {
    return new Option('--timeout [number]', `Set an ssr timeout in ms. If not specified, SSR requests will never timeout.`)
        .env('SSR_TIMEOUT')
        .argParser(parseNumArg);
}
export function getPortOption() {
    return new Option('-p, --port <number>', `[number] set port`).env('PORT').argParser(parseNumArg);
}
export function getModeOption() {
    return new Option('-m, --mode <mode>', '[string] server mode')
        .env('MODE')
        .choices(['dev', 'compat', 'prod-compat', 'prod']);
}
export function getSandboxOption() {
    return new Option('--sandbox', `[boolean] turn off ssr debugging and render pages using the sandbox vm`);
}
export function parseNumArg(value) {
    const parsedValue = parseInt(value, 10);
    if (isNaN(parsedValue)) {
        throw new InvalidArgumentError('Not a number.');
    }
    return parsedValue;
}
//# sourceMappingURL=utils.js.map