var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module2) => {
  return __exportStar(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? {get: () => module2.default, enumerable: true} : {value: module2, enumerable: true})), module2);
};

// packages/lwr/src/cli/utils.ts
__markAsModule(exports);
__export(exports, {
  getModeOption: () => getModeOption,
  getPortOption: () => getPortOption,
  getSandboxOption: () => getSandboxOption,
  getSsrTimeoutOption: () => getSsrTimeoutOption,
  getTargetOption: () => getTargetOption,
  parseNumArg: () => parseNumArg
});
var import_commander = __toModule(require("commander"));
function getTargetOption() {
  return new import_commander.Option("-t, --target <target>", "[string] configured target for deployment").choices(["default", "mrt", "netlify"]).default("default");
}
function getSsrTimeoutOption() {
  return new import_commander.Option("--timeout [number]", `Set an ssr timeout in ms. If not specified, SSR requests will never timeout.`).env("SSR_TIMEOUT").argParser(parseNumArg);
}
function getPortOption() {
  return new import_commander.Option("-p, --port <number>", `[number] set port`).env("PORT").argParser(parseNumArg);
}
function getModeOption() {
  return new import_commander.Option("-m, --mode <mode>", "[string] server mode").env("MODE").choices(["dev", "compat", "prod-compat", "prod"]);
}
function getSandboxOption() {
  return new import_commander.Option("--sandbox", `[boolean] turn off ssr debugging and render pages using the sandbox vm`);
}
function parseNumArg(value) {
  const parsedValue = parseInt(value, 10);
  if (isNaN(parsedValue)) {
    throw new import_commander.InvalidArgumentError("Not a number.");
  }
  return parsedValue;
}
